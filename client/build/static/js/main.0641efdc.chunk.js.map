{"version":3,"sources":["assets/cards-front sync /^/.*/.png$","assets/logo.png","assets/card-back.png","assets/cards-front/0B.png","assets/cards-front/0G.png","assets/cards-front/0R.png","assets/cards-front/0Y.png","assets/cards-front/1B.png","assets/cards-front/1G.png","assets/cards-front/1R.png","assets/cards-front/1Y.png","assets/cards-front/2B.png","assets/cards-front/2G.png","assets/cards-front/2R.png","assets/cards-front/2Y.png","assets/cards-front/3B.png","assets/cards-front/3G.png","assets/cards-front/3R.png","assets/cards-front/3Y.png","assets/cards-front/4B.png","assets/cards-front/4G.png","assets/cards-front/4R.png","assets/cards-front/4Y.png","assets/cards-front/5B.png","assets/cards-front/5G.png","assets/cards-front/5R.png","assets/cards-front/5Y.png","assets/cards-front/6B.png","assets/cards-front/6G.png","assets/cards-front/6R.png","assets/cards-front/6Y.png","assets/cards-front/7B.png","assets/cards-front/7G.png","assets/cards-front/7R.png","assets/cards-front/7Y.png","assets/cards-front/8B.png","assets/cards-front/8G.png","assets/cards-front/8R.png","assets/cards-front/8Y.png","assets/cards-front/9B.png","assets/cards-front/9G.png","assets/cards-front/9R.png","assets/cards-front/9Y.png","assets/cards-front/D2B.png","assets/cards-front/D2G.png","assets/cards-front/D2R.png","assets/cards-front/D2Y.png","assets/cards-front/D4W.png","assets/cards-front/W.png","assets/cards-front/_B.png","assets/cards-front/_G.png","assets/cards-front/_R.png","assets/cards-front/_Y.png","assets/cards-front/skipB.png","assets/cards-front/skipG.png","assets/cards-front/skipR.png","assets/cards-front/skipY.png","utils/randomCodeGenerator.js","components/Homepage.js","utils/packOfCards.js","components/Game.js","components/Spinner.js","assets/sounds/game-bg-music.mp3","assets/sounds/uno-sound.mp3","assets/sounds/shuffling-cards-1.mp3","assets/sounds/skip-sound.mp3","assets/sounds/draw2-sound.mp3","assets/sounds/wild-sound.mp3","assets/sounds/draw4-sound.mp3","assets/sounds/game-over-sound.mp3","utils/shuffleArray.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","Homepage","useState","roomCode","setRoomCode","className","src","require","default","width","type","placeholder","onChange","event","target","value","to","randomCodeGenerator","socket","Spinner","Game","props","data","queryString","parse","location","search","room","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","useEffect","io","connect","emit","error","off","gameOver","setGameOver","winner","setWinner","turn","setTurn","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","currentColor","setCurrentColor","currentNumber","setCurrentNumber","playedCardsPile","setPlayedCardsPile","drawCardPile","setDrawCardPile","isChatBoxHidden","setChatBoxHidden","isUnoButtonPressed","setUnoButtonPressed","isSoundMuted","setSoundMuted","isMusicMuted","setMusicMuted","useSound","bgMusic","loop","playBBgMusic","pause","unoSound","playUnoSound","shufflingSound","playShufflingSound","skipCardSound","playSkipCardSound","draw2CardSound","playDraw2CardSound","wildCardSound","playWildCardSound","draw4CardSound","playDraw4CardSound","gameOverSound","playGameOverSound","startingCardIndex","shuffledCards","array","j","temp","shuffleArray","PACK_OF_CARDS","splice","on","name","chatBody","document","querySelector","scrollTop","scrollHeight","checkGameOver","arr","checkWinner","player","toggleChatBox","style","display","sendMessage","preventDefault","onCardPlayedHandler","played_card","cardPlayedBy","numberOfPlayedCard","colorOfPlayedCard","console","log","removeIndex","indexOf","slice","alert","copiedDrawCardPileArray","drawCard1","pop","drawCard2","updatedPlayer1Deck","push","updatedPlayer2Deck","drawCard1X","drawCard2X","newColor","prompt","toUpperCase","drawCard3","drawCard4","onCardDrawnHandler","drawCard","colorOfDrawnCard","numberOfDrawnCard","onClick","pointerEvents","item","disabled","class","msg","user","text","onKeyPress","key","href","App","path","exact","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"gHAAA,IAAIA,EAAM,CACT,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,YAAa,IACb,YAAa,IACb,YAAa,IACb,YAAa,IACb,YAAa,IACb,UAAW,IACX,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,cAAe,IACf,cAAe,IACf,cAAe,IACf,cAAe,KAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,uCC3EpB,OAAe,cAA0B,kC,6CCAzC,OAAe,cAA0B,uC,kHCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,iC,6BCAzC,OAAe,cAA0B,iC,6BCAzC,OAAe,cAA0B,iC,6BCAzC,OAAe,cAA0B,iC,6BCAzC,OAAe,cAA0B,iC,6BCAzC,OAAe,cAA0B,+B,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,gC,6BCAzC,OAAe,cAA0B,mC,6BCAzC,OAAe,cAA0B,mC,6BCAzC,OAAe,cAA0B,mC,6BCAzC,OAAe,cAA0B,mC,6GCA1B,SAASY,EAAOC,GAI3B,IAHA,IAAIC,EAAmB,GACnBC,EAAmB,iEACnBC,EAAmBD,EAAWF,OACxBI,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAE1D,OAAOF,E,WCmBIQ,EAtBE,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACZC,EADY,KACFC,EADE,KAGnB,OACI,qBAAKC,UAAU,WAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKC,IAAKC,EAAQ,IAAsBC,QAASC,MAAM,UACvD,sBAAKJ,UAAU,gBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,uBAAOK,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACC,GAAD,OAAWT,EAAYS,EAAMC,OAAOC,UACzF,cAAC,IAAD,CAAMC,GAAE,yBAAoBb,GAA5B,SAAwC,wBAAQE,UAAU,oBAAlB,4BAE5C,oCACA,qBAAKA,UAAU,kBAAf,SACI,cAAC,IAAD,CAAMW,GAAE,yBAAoBC,EAAoB,IAAhD,SAAsD,wBAAQZ,UAAU,qBAAlB,sC,OCjB/D,GACX,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAAS,QAAS,KAAM,KAAM,MAAO,MACvJ,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAAS,QAAS,KAAM,KAAM,MAAO,MACvJ,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAAS,QAAS,KAAM,KAAM,MAAO,MACvJ,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAAS,QAAS,KAAM,KAAM,MAAO,MACvJ,IAAK,IAAK,IAAK,IAAK,MAAO,MAAO,MAAO,O,ICiBzCa,E,kCCfWC,EANC,WACZ,OACI,qBAAKd,UAAU,SAAf,yB,QCJO,MAA0B,0CCA1B,MAA0B,sCCA1B,MAA0B,8CCA1B,MAA0B,uCCA1B,MAA0B,wCCA1B,MAA0B,uCCA1B,MAA0B,wCCA1B,MAA0B,4CTs2C1Be,EA10CF,SAACC,GACV,IAAMC,EAAOC,IAAYC,MAAMH,EAAMI,SAASC,QAD1B,EAIIxB,mBAASoB,EAAKnB,UAJlB,mBAIbwB,EAJa,aAKYzB,oBAAS,IALrB,mBAKb0B,EALa,KAKHC,EALG,OAMM3B,mBAAS,IANf,mBAMb4B,EANa,KAMNC,EANM,OAOkB7B,mBAAS,IAP3B,mBAOb8B,EAPa,KAOAC,EAPA,OAQU/B,mBAAS,IARnB,mBAQbgC,EARa,KAQJC,EARI,OASYjC,mBAAS,IATrB,mBASbkC,EATa,KASHC,EATG,KAWpBC,qBAAU,WAeN,OARApB,EAASqB,IAAGC,QAtBF,wCAgBiB,CACvB,UAAa,EACb,qBAAwB,WACxB,QAAY,IACZ,WAAe,CAAC,gBAIbC,KAAK,OAAQ,CAACd,KAAMA,IAAO,SAACe,GAC5BA,GACCb,GAAY,MAIb,WACHX,EAAOuB,KAAK,cAEZvB,EAAOyB,SAEZ,IA/BiB,MAkCYzC,oBAAS,GAlCrB,mBAkCb0C,EAlCa,KAkCHC,EAlCG,OAmCQ3C,mBAAS,IAnCjB,mBAmCb4C,EAnCa,KAmCLC,EAnCK,OAoCI7C,mBAAS,IApCb,mBAoCb8C,GApCa,KAoCPC,GApCO,QAqCkB/C,mBAAS,IArC3B,qBAqCbgD,GArCa,MAqCAC,GArCA,SAsCkBjD,mBAAS,IAtC3B,qBAsCbkD,GAtCa,MAsCAC,GAtCA,SAuCoBnD,mBAAS,IAvC7B,qBAuCboD,GAvCa,MAuCCC,GAvCD,SAwCsBrD,mBAAS,IAxC/B,qBAwCbsD,GAxCa,MAwCEC,GAxCF,SAyC0BvD,mBAAS,IAzCnC,qBAyCbwD,GAzCa,MAyCIC,GAzCJ,SA0CoBzD,mBAAS,IA1C7B,qBA0Cb0D,GA1Ca,MA0CCC,GA1CD,SA4CwB3D,oBAAS,GA5CjC,qBA4Cb4D,GA5Ca,MA4CIC,GA5CJ,SA6C8B7D,oBAAS,GA7CvC,qBA6Cb8D,GA7Ca,MA6COC,GA7CP,SA8CkB/D,oBAAS,GA9C3B,qBA8CbgE,GA9Ca,MA8CCC,GA9CD,SA+CkBjE,oBAAS,GA/C3B,qBA+CbkE,GA/Ca,MA+CCC,GA/CD,SAiDcC,YAASC,EAAS,CAAEC,MAAM,IAjDxC,qBAiDbC,GAjDa,MAiDGC,GAjDH,MAiDGA,MAjDH,GAkDGJ,YAASK,GAAzBC,GAlDa,wBAmDSN,YAASO,GAA/BC,GAnDa,wBAoDQR,YAASS,GAA9BC,GApDa,wBAqDSV,YAASW,GAA/BC,GArDa,wBAsDQZ,YAASa,GAA9BC,GAtDa,wBAuDSd,YAASe,GAA/BC,GAvDa,wBAwDQhB,YAASiB,GAA9BC,GAxDa,qBA2DpBlD,qBAAU,WAYN,IAVA,IASImD,EATEC,EUzFC,SAAsBC,GACjC,IAAK,IAAI/F,EAAI+F,EAAMnG,OAAS,EAAGI,EAAI,EAAGA,IAAK,CACvC,IAAIgG,EAAI9F,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCiG,EAAOF,EAAM/F,GACjB+F,EAAM/F,GAAK+F,EAAMC,GACjBD,EAAMC,GAAKC,EAEf,OAAOF,EVkFmBG,CAAaC,GAG7B7C,EAAcwC,EAAcM,OAAO,EAAG,GAGtC5C,EAAcsC,EAAcM,OAAO,EAAG,GAMF,UAAnCN,EADHD,EAAoB3F,KAAKC,MAAsB,GAAhBD,KAAKE,YACgD,OAAnC0F,EAAcD,IAAgE,QAAnCC,EAAcD,IACvE,UAAnCC,EAAcD,IAAmE,OAAnCC,EAAcD,IAAgE,QAAnCC,EAAcD,IACpE,UAAnCC,EAAcD,IAAmE,OAAnCC,EAAcD,IAAgE,QAAnCC,EAAcD,IACpE,UAAnCC,EAAcD,IAAmE,OAAnCC,EAAcD,IAAgE,QAAnCC,EAAcD,IACpE,MAAnCC,EAAcD,IAA+D,QAAnCC,EAAcD,KAQ5D,IAAM/B,EAAkBgC,EAAcM,OAAOP,EAAmB,GAG1D7B,EAAe8B,EAGrBxE,EAAOuB,KAAK,gBAAiB,CACzBG,UAAU,EACVI,KAAM,WACNE,YAAY,YAAKA,GACjBE,YAAY,YAAKA,GACjBE,aAAcI,EAAgB,GAAG7D,OAAO,GACxC2D,cAAeE,EAAgB,GAAG7D,OAAO,GACzC6D,gBAAgB,YAAKA,GACrBE,aAAa,YAAKA,OAEvB,IAEHtB,qBAAU,WACNpB,EAAO+E,GAAG,iBAAiB,YAA+G,IAA5GrD,EAA2G,EAA3GA,SAAUI,EAAiG,EAAjGA,KAAME,EAA2F,EAA3FA,YAAaE,EAA8E,EAA9EA,YAAaE,EAAiE,EAAjEA,aAAcE,EAAmD,EAAnDA,cAAeE,EAAoC,EAApCA,gBAAiBE,EAAmB,EAAnBA,aAClHf,EAAYD,GACZK,GAAQD,GACRG,GAAeD,GACfG,GAAeD,GACfG,GAAgBD,GAChBG,GAAiBD,GACjBG,GAAmBD,GACnBG,GAAgBD,MAGpB1C,EAAO+E,GAAG,mBAAmB,YAAuH,IAApHrD,EAAmH,EAAnHA,SAAUE,EAAyG,EAAzGA,OAAQE,EAAiG,EAAjGA,KAAME,EAA2F,EAA3FA,YAAaE,EAA8E,EAA9EA,YAAaE,EAAiE,EAAjEA,aAAcE,EAAmD,EAAnDA,cAAeE,EAAoC,EAApCA,gBAAiBE,EAAmB,EAAnBA,aAC5HhB,GAAYC,EAAYD,IACb,IAAXA,GAAmB4C,KACnB1C,GAAUC,EAAUD,GACpBE,GAAQC,GAAQD,GAChBE,GAAeC,GAAeD,GAC9BE,GAAeC,GAAeD,GAC9BE,GAAgBC,GAAgBD,GAChCE,GAAiBC,GAAiBD,GAClCE,GAAmBC,GAAmBD,GACtCE,GAAgBC,GAAgBD,GAChCK,IAAoB,MAGxB/C,EAAO+E,GAAG,YAAY,YAAgB,IAAbnE,EAAY,EAAZA,MACrBC,EAASD,MAGbZ,EAAO+E,GAAG,mBAAmB,YAAe,IAAZC,EAAW,EAAXA,KAC5BjE,EAAeiE,MAGnBhF,EAAO+E,GAAG,WAAW,SAAA/D,GACjBG,GAAY,SAAAD,GAAQ,4BAASA,GAAT,CAAmBF,OAEvC,IAAMiE,EAAWC,SAASC,cAAc,cACxCF,EAASG,UAAYH,EAASI,kBAEnC,IAGH,IAAMC,GAAgB,SAACC,GACnB,OAAsB,IAAfA,EAAIjH,QAGTkH,GAAc,SAACD,EAAKE,GACtB,OAAsB,IAAfF,EAAIjH,OAAemH,EAAS,IAGjCC,GAAgB,WAClB,IAAMT,EAAWC,SAASC,cAAc,cACrCvC,IACCqC,EAASU,MAAMC,QAAU,QACzB/C,IAAiB,KAGjBoC,EAASU,MAAMC,QAAU,OACzB/C,IAAiB,KAInBgD,GAAa,SAAClG,GAChBA,EAAMmG,iBACH9E,GACChB,EAAOuB,KAAK,cAAe,CAAEP,QAASA,IAAW,WAC7CC,EAAW,QAMjB8E,GAAsB,SAACC,GAEzB,IAAMC,EAAenE,GACrB,OAAOkE,GAEH,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAE1d,IAAME,EAAqBF,EAAYrH,OAAO,GACxCwH,EAAoBH,EAAYrH,OAAO,GAE7C,GAAGyD,KAAiB+D,EAGhB,GAFAC,QAAQC,IAAI,mBAEQ,aAAjBJ,EAA6B,CAG5B,IAAMK,EAActE,GAAYuE,QAAQP,GAGxC,GAAwB,IAArBhE,GAAY1D,QAAewE,IAwBzBE,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCF,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGF,IAA3B,YAA4CtE,GAAYwE,MAAMF,EAAc,KACvFlE,aAAc+D,EACd7D,cAAe4D,QAjC2B,CAC9CO,MAAM,+DAEN,IAAMC,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCE,EAAkB,sBAAO9E,GAAYwE,MAAM,EAAGF,IAA5B,YAA6CtE,GAAYwE,MAAMF,EAAc,KACrGQ,EAAmBC,KAAKJ,GACxBG,EAAmBC,KAAKF,IACvB7D,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCF,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,YAAK8E,GACjB1E,aAAc+D,EACd7D,cAAe4D,EACfxD,aAAa,YAAKgE,UAiBzB,CAGD,IAAMJ,EAAcpE,GAAYqE,QAAQP,GAGxC,GAAwB,IAArB9D,GAAY5D,QAAewE,IAwBzBE,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCJ,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,IAA3B,YAA4CpE,GAAYsE,MAAMF,EAAc,KACvFlE,aAAc+D,EACd7D,cAAe4D,QAjC2B,CAC9CO,MAAM,+DAEN,IAAMC,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCI,EAAkB,sBAAO9E,GAAYsE,MAAM,EAAGF,IAA5B,YAA6CpE,GAAYsE,MAAMF,EAAc,KACrGU,EAAmBD,KAAKJ,GACxBK,EAAmBD,KAAKF,IACvB7D,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCJ,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,YAAK8E,GACjB5E,aAAc+D,EACd7D,cAAe4D,EACfxD,aAAa,YAAKgE,WAmB7B,GAAGpE,KAAkB4D,EAGtB,GAFAE,QAAQC,IAAI,oBAEQ,aAAjBJ,EAA6B,CAG5B,IAAMK,EAActE,GAAYuE,QAAQP,GAGxC,GAAwB,IAArBhE,GAAY1D,QAAewE,IAwBzBE,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCF,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGF,IAA3B,YAA4CtE,GAAYwE,MAAMF,EAAc,KACvFlE,aAAc+D,EACd7D,cAAe4D,QAjC2B,CAC9CO,MAAM,+DAEN,IAAMC,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCE,EAAkB,sBAAO9E,GAAYwE,MAAM,EAAGF,IAA5B,YAA6CtE,GAAYwE,MAAMF,EAAc,KACrGQ,EAAmBC,KAAKJ,GACxBG,EAAmBC,KAAKF,IACvB7D,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCF,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,YAAK8E,GACjB1E,aAAc+D,EACd7D,cAAe4D,EACfxD,aAAa,YAAKgE,UAiBzB,CAGD,IAAMJ,EAAcpE,GAAYqE,QAAQP,GAGxC,GAAwB,IAArB9D,GAAY5D,QAAewE,IAwBzBE,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCJ,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,IAA3B,YAA4CpE,GAAYsE,MAAMF,EAAc,KACvFlE,aAAc+D,EACd7D,cAAe4D,QAjC2B,CAC9CO,MAAM,+DAEN,IAAMC,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCI,EAAkB,sBAAO9E,GAAYsE,MAAM,EAAGF,IAA5B,YAA6CpE,GAAYsE,MAAMF,EAAc,KACrGU,EAAmBD,KAAKJ,GACxBK,EAAmBD,KAAKF,IACvB7D,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCJ,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,YAAK8E,GACjB5E,aAAc+D,EACd7D,cAAe4D,EACfxD,aAAa,YAAKgE,WAoB9BD,MAAM,iBAEV,MAGJ,IAAK,QAAS,IAAK,QAAS,IAAK,QAAS,IAAK,QAE3C,IAAMN,EAAoBH,EAAYrH,OAAO,GAE7C,GAAGyD,KAAiB+D,EAGhB,GAFAC,QAAQC,IAAI,mBAEQ,aAAjBJ,EAA6B,CAG5B,IAAMK,EAActE,GAAYuE,QAAQP,GAGxC,GAAwB,IAArBhE,GAAY1D,QAAewE,IAuBzBE,IAAgBc,KAEjB9D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGF,IAA3B,YAA4CtE,GAAYwE,MAAMF,EAAc,KACvFlE,aAAc+D,EACd7D,cAAe,UA/B2B,CAC9CmE,MAAM,+DAEN,IAAMC,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCE,EAAkB,sBAAO9E,GAAYwE,MAAM,EAAGF,IAA5B,YAA6CtE,GAAYwE,MAAMF,EAAc,KACrGQ,EAAmBC,KAAKJ,GACxBG,EAAmBC,KAAKF,IACvB7D,IAAgBc,KAEjB9D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,YAAK8E,GACjB1E,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,UAgBzB,CAGD,IAAMJ,EAAcpE,GAAYqE,QAAQP,GAGxC,GAAwB,IAArB9D,GAAY5D,QAAewE,IAuBzBE,IAAgBc,KAEjB9D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,IAA3B,YAA4CpE,GAAYsE,MAAMF,EAAc,KACvFlE,aAAc+D,EACd7D,cAAe,UA/B2B,CAC9CmE,MAAM,+DAEN,IAAMC,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCI,EAAkB,sBAAO9E,GAAYsE,MAAM,EAAGF,IAA5B,YAA6CpE,GAAYsE,MAAMF,EAAc,KACrGU,EAAmBD,KAAKJ,GACxBK,EAAmBD,KAAKF,IACvB7D,IAAgBc,KAEjB9D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,YAAK8E,GACjB5E,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,WAkB7B,GAAqB,MAAlBpE,GAGJ,GAFA8D,QAAQC,IAAI,oBAEQ,aAAjBJ,EAA6B,CAG5B,IAAMK,EAActE,GAAYuE,QAAQP,GAGxC,GAAwB,IAArBhE,GAAY1D,QAAewE,IAuBzBE,IAAgBc,KAEjB9D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGF,IAA3B,YAA4CtE,GAAYwE,MAAMF,EAAc,KACvFlE,aAAc+D,EACd7D,cAAe,UA/B2B,CAC9CmE,MAAM,+DAEN,IAAMC,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCE,EAAkB,sBAAO9E,GAAYwE,MAAM,EAAGF,IAA5B,YAA6CtE,GAAYwE,MAAMF,EAAc,KACrGQ,EAAmBC,KAAKJ,GACxBG,EAAmBC,KAAKF,IACvB7D,IAAgBc,KAEjB9D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,YAAK8E,GACjB1E,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,UAgBzB,CAGD,IAAMJ,EAAcpE,GAAYqE,QAAQP,GAGxC,GAAwB,IAArB9D,GAAY5D,QAAewE,IAuBzBE,IAAgBc,KAEjB9D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,IAA3B,YAA4CpE,GAAYsE,MAAMF,EAAc,KACvFlE,aAAc+D,EACd7D,cAAe,UA/B2B,CAC9CmE,MAAM,+DAEN,IAAMC,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCI,EAAkB,sBAAO9E,GAAYsE,MAAM,EAAGF,IAA5B,YAA6CpE,GAAYsE,MAAMF,EAAc,KACrGU,EAAmBD,KAAKJ,GACxBK,EAAmBD,KAAKF,IACvB7D,IAAgBc,KAEjB9D,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,YAAK8E,GACjB5E,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,WAmB9BD,MAAM,iBAEV,MAGJ,IAAK,MAAO,IAAK,MAAO,IAAK,MAAO,IAAK,MAErC,IAAMN,EAAoBH,EAAYrH,OAAO,GAE7C,GAAGyD,KAAiB+D,EAGhB,GAFAC,QAAQC,IAAI,mBAEQ,aAAjBJ,EAA6B,CAI5B,IAAMK,EAActE,GAAYuE,QAAQP,GAElCU,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MAG1C,GAAwB,IAArB5E,GAAY1D,QAAewE,IAsBzBE,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGF,IAA3B,YAA4CtE,GAAYwE,MAAMF,EAAc,KACvFpE,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDqI,EAAWE,GAA3D,YAAyE3E,GAAYsE,MAAMtE,GAAY5D,UAClH8D,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,SAhCwB,CAC9CD,MAAM,+DAEN,IAAMQ,EAAaP,EAAwBE,MACrCM,EAAaR,EAAwBE,MACrCE,GAAkB,sBAAO9E,GAAYwE,MAAM,EAAGF,IAA5B,YAA6CtE,GAAYwE,MAAMF,EAAc,KACrGQ,GAAmBC,KAAKE,GACxBH,GAAmBC,KAAKG,IACvBlE,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,YAAK8E,IACjB5E,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDqI,EAAWE,GAA3D,YAAyE3E,GAAYsE,MAAMtE,GAAY5D,UAClH8D,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,UAkBzB,CAID,IAAMJ,GAAcpE,GAAYqE,QAAQP,GAElCU,GAAuB,YAAOhE,IAE9BiE,GAAYD,GAAwBE,MACpCC,GAAYH,GAAwBE,MAG1C,GAAwB,IAArB1E,GAAY5D,QAAewE,IAsBzBE,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,KAA3B,YAA4CpE,GAAYsE,MAAMF,GAAc,KACvFtE,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,GAAWE,IAA3D,YAAyE7E,GAAYwE,MAAMxE,GAAY1D,UAClH8D,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,UAhCwB,CAC9CD,MAAM,+DAEN,IAAMQ,GAAaP,GAAwBE,MACrCM,GAAaR,GAAwBE,MACrCI,GAAkB,sBAAO9E,GAAYsE,MAAM,EAAGF,KAA5B,YAA6CpE,GAAYsE,MAAMF,GAAc,KACrGU,GAAmBD,KAAKE,IACxBD,GAAmBD,KAAKG,KACvBlE,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,YAAK8E,IACjBhF,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,GAAWE,IAA3D,YAAyE7E,GAAYwE,MAAMxE,GAAY1D,UAClH8D,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,YAoB7B,GAAqB,MAAlBpE,GAGJ,GAFA8D,QAAQC,IAAI,mBAEQ,aAAjBJ,EAA6B,CAI5B,IAAMK,GAActE,GAAYuE,QAAQP,GAElCU,GAAuB,YAAOhE,IAE9BiE,GAAYD,GAAwBE,MACpCC,GAAYH,GAAwBE,MAG1C,GAAwB,IAArB5E,GAAY1D,QAAewE,IAsBzBE,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGF,KAA3B,YAA4CtE,GAAYwE,MAAMF,GAAc,KACvFpE,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDqI,GAAWE,IAA3D,YAAyE3E,GAAYsE,MAAMtE,GAAY5D,UAClH8D,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,UAhCwB,CAC9CD,MAAM,+DAEN,IAAMQ,GAAaP,GAAwBE,MACrCM,GAAaR,GAAwBE,MACrCE,GAAkB,sBAAO9E,GAAYwE,MAAM,EAAGF,KAA5B,YAA6CtE,GAAYwE,MAAMF,GAAc,KACrGQ,GAAmBC,KAAKE,IACxBH,GAAmBC,KAAKG,KACvBlE,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,YAAK8E,IACjB5E,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDqI,GAAWE,IAA3D,YAAyE3E,GAAYsE,MAAMtE,GAAY5D,UAClH8D,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,WAkBzB,CAID,IAAMJ,GAAcpE,GAAYqE,QAAQP,GAElCU,GAAuB,YAAOhE,IAE9BiE,GAAYD,GAAwBE,MACpCC,GAAYH,GAAwBE,MAG1C,GAAwB,IAArB1E,GAAY5D,QAAewE,IAsBzBE,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,KAA3B,YAA4CpE,GAAYsE,MAAMF,GAAc,KACvFtE,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,GAAWE,IAA3D,YAAyE7E,GAAYwE,MAAMxE,GAAY1D,UAClH8D,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,UAhCwB,CAC9CD,MAAM,+DAEN,IAAMQ,GAAaP,GAAwBE,MACrCM,GAAaR,GAAwBE,MACrCI,GAAkB,sBAAO9E,GAAYsE,MAAM,EAAGF,KAA5B,YAA6CpE,GAAYsE,MAAMF,GAAc,KACrGU,GAAmBD,KAAKE,IACxBD,GAAmBD,KAAKG,KACvBlE,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,YAAK8E,IACjBhF,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,GAAWE,IAA3D,YAAyE7E,GAAYwE,MAAMxE,GAAY1D,UAClH8D,aAAc+D,EACd7D,cAAe,IACfI,aAAa,YAAKgE,YAqB9BD,MAAM,iBAEV,MAGJ,IAAK,IAED,GAAoB,aAAjBR,EAA6B,CAE5B,IAAMkB,GAAWC,OAAO,6CAA6CC,cAE/Df,GAActE,GAAYuE,QAAQP,GAIxC,GAAwB,IAArBhE,GAAY1D,QAAewE,IAwBzBE,IAAgBkB,KAEjBlE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCF,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGF,KAA3B,YAA4CtE,GAAYwE,MAAMF,GAAc,KACvFlE,aAAc+E,GACd7E,cAAe,UAjC2B,CAC9CmE,MAAM,+DAEN,IAAMC,GAAuB,YAAOhE,IAE9BiE,GAAYD,GAAwBE,MACpCC,GAAYH,GAAwBE,MACpCE,GAAkB,sBAAO9E,GAAYwE,MAAM,EAAGF,KAA5B,YAA6CtE,GAAYwE,MAAMF,GAAc,KACrGQ,GAAmBC,KAAKJ,IACxBG,GAAmBC,KAAKF,KACvB7D,IAAgBkB,KAEjBlE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCF,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,YAAK8E,IACjB1E,aAAc+E,GACd7E,cAAe,IACfI,aAAa,YAAKgE,WAiBzB,CAED,IAAMS,GAAWC,OAAO,6CAA6CC,cAE/Df,GAAcpE,GAAYqE,QAAQP,GAIxC,GAAwB,IAArB9D,GAAY5D,QAAewE,IAwBzBE,IAAgBkB,KAEjBlE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCJ,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,KAA3B,YAA4CpE,GAAYsE,MAAMF,GAAc,KACvFlE,aAAc+E,GACd7E,cAAe,UAjC2B,CAC9CmE,MAAM,+DAEN,IAAMC,GAAuB,YAAOhE,IAE9BiE,GAAYD,GAAwBE,MACpCC,GAAYH,GAAwBE,MACpCI,GAAkB,sBAAO9E,GAAYsE,MAAM,EAAGF,KAA5B,YAA6CpE,GAAYsE,MAAMF,GAAc,KACrGU,GAAmBD,KAAKJ,IACxBK,GAAmBD,KAAKF,KACvB7D,IAAgBkB,KAEjBlE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCJ,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,YAAK8E,IACjB5E,aAAc+E,GACd7E,cAAe,IACfI,aAAa,YAAKgE,OAiB9B,MAGJ,IAAK,MAED,GAAoB,aAAjBT,EAA6B,CAE5B,IAAMkB,GAAWC,OAAO,6CAA6CC,cAE/Df,GAActE,GAAYuE,QAAQP,GAGlCU,GAAuB,YAAOhE,IAE9BiE,GAAYD,GAAwBE,MACpCC,GAAYH,GAAwBE,MACpCU,GAAYZ,GAAwBE,MACpCW,GAAYb,GAAwBE,MAI1C,GAAwB,IAArB5E,GAAY1D,QAAewE,IAsBzBE,IAAgBoB,KAEjBpE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGF,KAA3B,YAA4CtE,GAAYwE,MAAMF,GAAc,KACvFpE,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDqI,GAAWE,GAAWS,GAAWC,IAAjF,YAA+FrF,GAAYsE,MAAMtE,GAAY5D,UACxI8D,aAAc+E,GACd7E,cAAe,IACfI,aAAa,YAAKgE,UAhCwB,CAC9CD,MAAM,+DAEN,IAAMQ,GAAaP,GAAwBE,MACrCM,GAAaR,GAAwBE,MACrCE,GAAkB,sBAAO9E,GAAYwE,MAAM,EAAGF,KAA5B,YAA6CtE,GAAYwE,MAAMF,GAAc,KACrGQ,GAAmBC,KAAKE,IACxBH,GAAmBC,KAAKG,KACvBlE,IAAgBoB,KAEjBpE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAActD,IACxBJ,OAAQ4D,GAAYxD,GAAa,YACjCQ,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H0D,YAAY,YAAK8E,IACjB5E,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDqI,GAAWE,GAAWS,GAAWC,IAAjF,YAA+FrF,GAAYsE,MAAMtE,GAAY5D,UACxI8D,aAAc+E,GACd7E,cAAe,IACfI,aAAa,YAAKgE,WAkBzB,CAED,IAAMS,GAAWC,OAAO,6CAA6CC,cAE/Df,GAAcpE,GAAYqE,QAAQP,GAGlCU,GAAuB,YAAOhE,IAE9BiE,GAAYD,GAAwBE,MACpCC,GAAYH,GAAwBE,MACpCU,GAAYZ,GAAwBE,MACpCW,GAAYb,GAAwBE,MAgB1C,IAdC5D,IAAgBoB,KAEjBpE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,KAA3B,YAA4CpE,GAAYsE,MAAMF,GAAc,KACvFtE,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,GAAWE,GAAWS,GAAWC,IAAjF,YAA+FvF,GAAYwE,MAAMxE,GAAY1D,UACxI8D,aAAc+E,GACd7E,cAAe,IACfI,aAAa,YAAKgE,MAIE,IAArBxE,GAAY5D,QAAewE,IAsBzBE,IAAgBoB,KAEjBpE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGF,KAA3B,YAA4CpE,GAAYsE,MAAMF,GAAc,KACvFtE,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,GAAWE,GAAWS,GAAWC,IAAjF,YAA+FvF,GAAYwE,MAAMxE,GAAY1D,UACxI8D,aAAc+E,GACd7E,cAAe,IACfI,aAAa,YAAKgE,UAhCwB,CAC9CD,MAAM,+DAEN,IAAMQ,GAAaP,GAAwBE,MACrCM,GAAaR,GAAwBE,MACrCI,GAAkB,sBAAO9E,GAAYsE,MAAM,EAAGF,KAA5B,YAA6CpE,GAAYsE,MAAMF,GAAc,KACrGU,GAAmBD,KAAKE,IACxBD,GAAmBD,KAAKG,KACvBlE,IAAgBoB,KAEjBpE,EAAOuB,KAAK,kBAAmB,CAC3BG,SAAU4D,GAAcpD,IACxBN,OAAQ4D,GAAYtD,GAAa,YACjCM,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwD0H,GAAxD,YAAwExD,GAAgBgE,MAAMhE,GAAgBlE,UAC7H4D,YAAY,YAAK8E,IACjBhF,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,GAAWE,GAAWS,GAAWC,IAAjF,YAA+FvF,GAAYwE,MAAMxE,GAAY1D,UACxI8D,aAAc+E,GACd7E,cAAe,IACfI,aAAa,YAAKgE,UAuBpCc,GAAqB,WAIvB,GAAmB,aAFC1F,GAEW,CAG3B,IAAM4E,EAAuB,YAAOhE,IAE9B+E,EAAWf,EAAwBE,MAEnCc,EAAmBD,EAAS9I,OAAO8I,EAASnJ,OAAS,GACvDqJ,EAAoBF,EAAS9I,OAAO,GACxC,GAAG+I,IAAqBtF,IAA8B,UAAbqF,GAAqC,UAAbA,GAAqC,UAAbA,GAAqC,UAAbA,EAW5G,GAAGC,IAAqBtF,IAA8B,QAAbqF,GAAmC,QAAbA,GAAmC,QAAbA,GAAmC,QAAbA,EAkB3G,GAAgB,MAAbA,EAAkB,CACtBhB,MAAM,YAAD,OAAagB,EAAb,6BAEL,IAAMN,EAAWC,OAAO,6CAA6CC,eACpErE,IAAgBkB,KAEjBlE,EAAOuB,KAAK,kBAAmB,CAC3BO,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H8D,aAAc+E,EACd7E,cAAe,IACfI,aAAa,YAAKgE,UAGrB,GAAgB,QAAbe,EAAoB,CACxBhB,MAAM,YAAD,OAAagB,EAAb,6BAEL,IAAMN,EAAWC,OAAO,6CAA6CC,cAG/DX,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCU,EAAYZ,EAAwBE,MACpCW,EAAYb,EAAwBE,OACzC5D,IAAgBoB,KAEjBpE,EAAOuB,KAAK,kBAAmB,CAC3BiB,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDqI,EAAWE,EAAWS,EAAWC,GAAjF,YAA+FrF,GAAYsE,MAAMtE,GAAY5D,UACxI8D,aAAc+E,EACd7E,cAAe,IACfI,aAAa,YAAKgE,UAIlBiB,IAAsBrF,IAAiBoF,IAAqBtF,IAChEqE,MAAM,YAAD,OAAagB,EAAb,8BACJzE,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BO,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H8D,aAAcsF,EACdpF,cAAeqF,EACfjF,aAAa,YAAKgE,QAKrB1D,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BO,KAAM,WACNE,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDmJ,GAAhD,YAA6DzF,GAAYwE,MAAMxE,GAAY1D,UACtGoE,aAAa,YAAKgE,UA1E2G,CACjID,MAAM,YAAD,OAAagB,EAAb,6BAGL,IAAMf,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,OACzC5D,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BiB,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H4D,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDqI,EAAWE,GAA3D,YAAyE3E,GAAYsE,MAAMtE,GAAY5D,UAClH8D,aAAcsF,EACdpF,cAAe,IACfI,aAAa,YAAKgE,UAzBtBD,MAAM,YAAD,OAAagB,EAAb,8BACJzE,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BiB,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H8D,aAAcsF,EACdpF,cAAe,IACfI,aAAa,YAAKgE,SAiFzB,CAGD,IAAMA,EAAuB,YAAOhE,IAE9B+E,EAAWf,EAAwBE,MAEnCc,EAAmBD,EAAS9I,OAAO8I,EAASnJ,OAAS,GACvDqJ,EAAoBF,EAAS9I,OAAO,GACxC,GAAG+I,IAAqBtF,IAA8B,UAAbqF,GAAqC,UAAbA,GAAqC,UAAbA,GAAqC,UAAbA,EAW5G,GAAGC,IAAqBtF,IAA8B,QAAbqF,GAAmC,QAAbA,GAAmC,QAAbA,GAAmC,QAAbA,EAkB3G,GAAgB,MAAbA,EAAkB,CACtBhB,MAAM,YAAD,OAAagB,EAAb,6BAEL,IAAMN,EAAWC,OAAO,6CAA6CC,eACpErE,IAAgBkB,KAEjBlE,EAAOuB,KAAK,kBAAmB,CAC3BO,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H8D,aAAc+E,EACd7E,cAAe,IACfI,aAAa,YAAKgE,UAGrB,GAAgB,QAAbe,EAAoB,CACxBhB,MAAM,YAAD,OAAagB,EAAb,6BAEL,IAAMN,EAAWC,OAAO,6CAA6CC,cAG/DX,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,MACpCU,EAAYZ,EAAwBE,MACpCW,EAAYb,EAAwBE,OACzC5D,IAAgBoB,KAEjBpE,EAAOuB,KAAK,kBAAmB,CAC3BiB,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,EAAWE,EAAWS,EAAWC,GAAjF,YAA+FvF,GAAYwE,MAAMxE,GAAY1D,UACxI8D,aAAc+E,EACd7E,cAAe,IACfI,aAAa,YAAKgE,UAIlBiB,IAAsBrF,IAAiBoF,IAAqBtF,IAChEqE,MAAM,YAAD,OAAagB,EAAb,8BACJzE,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BO,KAAM,WACNU,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H8D,aAAcsF,EACdpF,cAAeqF,EACfjF,aAAa,YAAKgE,QAKrB1D,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BO,KAAM,WACNI,YAAY,GAAD,mBAAMA,GAAYsE,MAAM,EAAGtE,GAAY5D,SAAvC,CAAgDmJ,GAAhD,YAA6DvF,GAAYsE,MAAMtE,GAAY5D,UACtGoE,aAAa,YAAKgE,UA1E2G,CACjID,MAAM,YAAD,OAAagB,EAAb,6BAGL,IAAMf,EAAuB,YAAOhE,IAE9BiE,EAAYD,EAAwBE,MACpCC,EAAYH,EAAwBE,OACzC5D,IAAgBgB,KAEjBhE,EAAOuB,KAAK,kBAAmB,CAC3BiB,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H0D,YAAY,GAAD,mBAAMA,GAAYwE,MAAM,EAAGxE,GAAY1D,SAAvC,CAAgDqI,EAAWE,GAA3D,YAAyE7E,GAAYwE,MAAMxE,GAAY1D,UAClH8D,aAAcsF,EACdpF,cAAe,IACfI,aAAa,YAAKgE,UAzBtBD,MAAM,YAAD,OAAagB,EAAb,8BACJzE,IAAgBY,KAEjB5D,EAAOuB,KAAK,kBAAmB,CAC3BiB,gBAAgB,GAAD,mBAAMA,GAAgBgE,MAAM,EAAGhE,GAAgBlE,SAA/C,CAAwDmJ,GAAxD,YAAqEjF,GAAgBgE,MAAMhE,GAAgBlE,UAC1H8D,aAAcsF,EACdpF,cAAe,IACfI,aAAa,YAAKgE,OAmFlC,OACI,sBAAKvH,UAAS,+CAA0CiD,IAAxD,UACO1B,EA0JG,2CA1JS,qCAEX,sBAAKvB,UAAU,UAAf,UACI,qBAAKC,IAAKC,EAAQ,IAAsBC,UACxC,6CAAgBmB,KAChB,iCACI,wBAAQtB,UAAU,oBAAoByI,QAAS,kBAAM3E,IAAeD,KAApE,SAAoFA,GAAe,sBAAM7D,UAAU,iBAAhB,wBAAqD,sBAAMA,UAAU,iBAAhB,yBACxJ,wBAAQA,UAAU,oBAAoByI,QAAS,WACxC1E,GACCK,KAEAC,KACJL,IAAeD,KALnB,SAMIA,GAAe,sBAAM/D,UAAU,iBAAhB,uBAAoD,sBAAMA,UAAU,iBAAhB,gCAK/D,IAAfyB,EAAMtC,QAA8B,aAAhBwC,GAA8B,oBAAI3B,UAAU,cAAd,yCACnC,IAAfyB,EAAMtC,QAA8B,aAAhBwC,GAA8B,oBAAI3B,UAAU,cAAd,oDAEnC,IAAfyB,EAAMtC,QAAc,mCAEhBoD,EAAW,8BAAiB,KAAXE,GAAiB,qCAAE,2CAAkB,+BAAKA,EAAL,iBACvD,gCAEqB,aAAhBd,GAA8B,qCAC/B,sBAAK3B,UAAU,cAAcwG,MAAO,CAACkC,cAAe,QAApD,UACI,mBAAG1I,UAAU,iBAAb,sBACC+C,GAAY5E,KAAI,SAACwK,EAAMpJ,GAAP,OACb,qBAEIS,UAAU,OACVyI,QAAS,kBAAM7B,GAAoB+B,IACnC1I,IAAKC,EAAQ,IAA2BC,SAHnCZ,MAML,aAAPoD,IAAqB,cAAC,EAAD,OAE1B,uBACA,sBAAK3C,UAAU,aAAawG,MAAgB,aAAT7D,GAAsB,CAAC+F,cAAe,QAAU,KAAnF,UACI,wBAAQ1I,UAAU,cAAc4I,SAAmB,aAATjG,GAAqB8F,QAASJ,GAAxE,uBACChF,IAAmBA,GAAgBlE,OAAO,GAC3C,qBACIa,UAAU,OACVC,IAAKC,MAAQ,YAAyBmD,GAAgBA,GAAgBlE,OAAO,GAAjE,SAA2EgB,UAE3F,wBAAQH,UAAU,qBAAqB4I,SAAiC,IAAvB/F,GAAY1D,OAAcsJ,QAAS,WAChF7E,IAAqBD,IACrBY,MAFJ,oBAKJ,uBACA,sBAAKvE,UAAU,cAAcwG,MAAgB,aAAT7D,GAAsB,KAAO,CAAC+F,cAAe,QAAjF,UACI,mBAAG1I,UAAU,iBAAb,sBACC6C,GAAY1E,KAAI,SAACwK,EAAMpJ,GAAP,OACb,qBAEIS,UAAU,OACVyI,QAAS,kBAAM7B,GAAoB+B,IACnC1I,IAAKC,MAAQ,YAAyByI,EAA1B,SAAsCxI,SAH7CZ,SAQjB,qBAAKS,UAAU,iBAAf,SACI,sBAAKA,UAAU,4BAAf,UACI,sBAAKA,UAAU,YAAf,UACI,0CACEyD,GAEF,sBAAMgF,QAASlC,GAAesC,MAAM,iBAApC,+BADA,sBAAMJ,QAASlC,GAAesC,MAAM,iBAApC,oCAGJ,sBAAK7I,UAAU,YAAf,UACI,qBAAKA,UAAU,aAAf,SACK+B,EAAS5D,KAAI,SAAA2K,GACV,MAAgB,aAAbA,EAAIC,KACI,qBAAK/I,UAAU,cAAf,SAA8B8I,EAAIE,OAC7B,aAAbF,EAAIC,KACI,qBAAK/I,UAAU,WAAf,SAA2B8I,EAAIE,YAD1C,OAIR,qBAAKhJ,UAAU,YAAf,SACI,uBAAOK,KAAK,OAAOC,YAAY,oBAAoBI,MAAOmB,EAAStB,SAAU,SAAAC,GAAK,OAAIsB,EAAWtB,EAAMC,OAAOC,QAAQuI,WAAY,SAAAzI,GAAK,MAAgB,UAAZA,EAAM0I,KAAiBxC,GAAYlG,gBAzD/J,OAgEd,aAAhBmB,GAA8B,qCAC/B,sBAAK3B,UAAU,cAAcwG,MAAO,CAACkC,cAAe,QAApD,UACI,mBAAG1I,UAAU,iBAAb,sBACC6C,GAAY1E,KAAI,SAACwK,EAAMpJ,GAAP,OACb,qBAEIS,UAAU,OACVyI,QAAS,kBAAM7B,GAAoB+B,IACnC1I,IAAKC,EAAQ,IAA2BC,SAHnCZ,MAML,aAAPoD,IAAqB,cAAC,EAAD,OAE1B,uBACA,sBAAK3C,UAAU,aAAawG,MAAgB,aAAT7D,GAAsB,CAAC+F,cAAe,QAAU,KAAnF,UACI,wBAAQ1I,UAAU,cAAc4I,SAAmB,aAATjG,GAAqB8F,QAASJ,GAAxE,uBACChF,IAAmBA,GAAgBlE,OAAO,GAC3C,qBACIa,UAAU,OACVC,IAAKC,MAAQ,YAAyBmD,GAAgBA,GAAgBlE,OAAO,GAAjE,SAA2EgB,UAE3F,wBAAQH,UAAU,qBAAqB4I,SAAiC,IAAvB7F,GAAY5D,OAAcsJ,QAAS,WAChF7E,IAAqBD,IACrBY,MAFJ,oBAKJ,uBACA,sBAAKvE,UAAU,cAAcwG,MAAgB,aAAT7D,GAAsB,CAAC+F,cAAe,QAAU,KAApF,UACI,mBAAG1I,UAAU,iBAAb,sBACC+C,GAAY5E,KAAI,SAACwK,EAAMpJ,GAAP,OACb,qBAEIS,UAAU,OACVyI,QAAS,kBAAM7B,GAAoB+B,IACnC1I,IAAKC,MAAQ,YAAyByI,EAA1B,SAAsCxI,SAH7CZ,SAQjB,qBAAKS,UAAU,iBAAf,SACI,sBAAKA,UAAU,4BAAf,UACI,sBAAKA,UAAU,YAAf,UACI,0CACEyD,GAEF,sBAAMgF,QAASlC,GAAesC,MAAM,iBAApC,+BADA,sBAAMJ,QAASlC,GAAesC,MAAM,iBAApC,oCAGJ,sBAAK7I,UAAU,YAAf,UACI,qBAAKA,UAAU,aAAf,SACK+B,EAAS5D,KAAI,SAAA2K,GACV,MAAgB,aAAbA,EAAIC,KACI,qBAAK/I,UAAU,cAAf,SAA8B8I,EAAIE,OAC7B,aAAbF,EAAIC,KACI,qBAAK/I,UAAU,WAAf,SAA2B8I,EAAIE,YAD1C,OAIR,qBAAKhJ,UAAU,YAAf,SACI,uBAAOK,KAAK,OAAOC,YAAY,oBAAoBI,MAAOmB,EAAStB,SAAU,SAAAC,GAAK,OAAIsB,EAAWtB,EAAMC,OAAOC,QAAQuI,WAAY,SAAAzI,GAAK,MAAgB,UAAZA,EAAM0I,KAAiBxC,GAAYlG,gBAzD/J,eAkE3C,uBACA,mBAAG2I,KAAK,IAAR,SAAY,wBAAQnJ,UAAU,kBAAlB,wBWn1CToJ,EATH,WACV,OACE,sBAAKpJ,UAAU,MAAf,UACE,cAAC,IAAD,CAAOqJ,KAAK,IAAIC,OAAK,EAACC,UAAW3J,IACjC,cAAC,IAAD,CAAOyJ,KAAK,QAAQC,OAAK,EAACC,UAAWxI,QCH3CyI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJ3D,SAAS4D,eAAe,Y","file":"static/js/main.0641efdc.chunk.js","sourcesContent":["var map = {\n\t\"./0B.png\": 104,\n\t\"./0G.png\": 105,\n\t\"./0R.png\": 106,\n\t\"./0Y.png\": 107,\n\t\"./1B.png\": 108,\n\t\"./1G.png\": 109,\n\t\"./1R.png\": 110,\n\t\"./1Y.png\": 111,\n\t\"./2B.png\": 112,\n\t\"./2G.png\": 113,\n\t\"./2R.png\": 114,\n\t\"./2Y.png\": 115,\n\t\"./3B.png\": 116,\n\t\"./3G.png\": 117,\n\t\"./3R.png\": 118,\n\t\"./3Y.png\": 119,\n\t\"./4B.png\": 120,\n\t\"./4G.png\": 121,\n\t\"./4R.png\": 122,\n\t\"./4Y.png\": 123,\n\t\"./5B.png\": 124,\n\t\"./5G.png\": 125,\n\t\"./5R.png\": 126,\n\t\"./5Y.png\": 127,\n\t\"./6B.png\": 128,\n\t\"./6G.png\": 129,\n\t\"./6R.png\": 130,\n\t\"./6Y.png\": 131,\n\t\"./7B.png\": 132,\n\t\"./7G.png\": 133,\n\t\"./7R.png\": 134,\n\t\"./7Y.png\": 135,\n\t\"./8B.png\": 136,\n\t\"./8G.png\": 137,\n\t\"./8R.png\": 138,\n\t\"./8Y.png\": 139,\n\t\"./9B.png\": 140,\n\t\"./9G.png\": 141,\n\t\"./9R.png\": 142,\n\t\"./9Y.png\": 143,\n\t\"./D2B.png\": 144,\n\t\"./D2G.png\": 145,\n\t\"./D2R.png\": 146,\n\t\"./D2Y.png\": 147,\n\t\"./D4W.png\": 148,\n\t\"./W.png\": 149,\n\t\"./_B.png\": 150,\n\t\"./_G.png\": 151,\n\t\"./_R.png\": 152,\n\t\"./_Y.png\": 153,\n\t\"./skipB.png\": 154,\n\t\"./skipG.png\": 155,\n\t\"./skipR.png\": 156,\n\t\"./skipY.png\": 157\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 24;","export default __webpack_public_path__ + \"static/media/logo.2d1c62d5.png\";","export default __webpack_public_path__ + \"static/media/card-back.ee67de74.png\";","export default __webpack_public_path__ + \"static/media/0B.4a5eb6bf.png\";","export default __webpack_public_path__ + \"static/media/0G.87d131c4.png\";","export default __webpack_public_path__ + \"static/media/0R.17fec01d.png\";","export default __webpack_public_path__ + \"static/media/0Y.dbfd6ac8.png\";","export default __webpack_public_path__ + \"static/media/1B.d1916ca9.png\";","export default __webpack_public_path__ + \"static/media/1G.0fb8729c.png\";","export default __webpack_public_path__ + \"static/media/1R.49ed3f72.png\";","export default __webpack_public_path__ + \"static/media/1Y.4881d6f5.png\";","export default __webpack_public_path__ + \"static/media/2B.b30c34c7.png\";","export default __webpack_public_path__ + \"static/media/2G.9f1043d9.png\";","export default __webpack_public_path__ + \"static/media/2R.b5523c9e.png\";","export default __webpack_public_path__ + \"static/media/2Y.7a49720f.png\";","export default __webpack_public_path__ + \"static/media/3B.55554e09.png\";","export default __webpack_public_path__ + \"static/media/3G.d12b188c.png\";","export default __webpack_public_path__ + \"static/media/3R.01e98a85.png\";","export default __webpack_public_path__ + \"static/media/3Y.60a855f1.png\";","export default __webpack_public_path__ + \"static/media/4B.9f863da2.png\";","export default __webpack_public_path__ + \"static/media/4G.e7f0c39e.png\";","export default __webpack_public_path__ + \"static/media/4R.d4b55dbd.png\";","export default __webpack_public_path__ + \"static/media/4Y.ae547a47.png\";","export default __webpack_public_path__ + \"static/media/5B.7da3f78c.png\";","export default __webpack_public_path__ + \"static/media/5G.5f629ef3.png\";","export default __webpack_public_path__ + \"static/media/5R.1cdf87eb.png\";","export default __webpack_public_path__ + \"static/media/5Y.8dfd1d59.png\";","export default __webpack_public_path__ + \"static/media/6B.3ae6979e.png\";","export default __webpack_public_path__ + \"static/media/6G.f7ec1912.png\";","export default __webpack_public_path__ + \"static/media/6R.ddda836b.png\";","export default __webpack_public_path__ + \"static/media/6Y.7ad7c4b5.png\";","export default __webpack_public_path__ + \"static/media/7B.61517841.png\";","export default __webpack_public_path__ + \"static/media/7G.4a277a6d.png\";","export default __webpack_public_path__ + \"static/media/7R.d9082455.png\";","export default __webpack_public_path__ + \"static/media/7Y.6eafca54.png\";","export default __webpack_public_path__ + \"static/media/8B.30db8e3e.png\";","export default __webpack_public_path__ + \"static/media/8G.b0f18f92.png\";","export default __webpack_public_path__ + \"static/media/8R.296eb053.png\";","export default __webpack_public_path__ + \"static/media/8Y.cefea39b.png\";","export default __webpack_public_path__ + \"static/media/9B.e252ce18.png\";","export default __webpack_public_path__ + \"static/media/9G.82ff5a0b.png\";","export default __webpack_public_path__ + \"static/media/9R.616afbce.png\";","export default __webpack_public_path__ + \"static/media/9Y.fc2b075e.png\";","export default __webpack_public_path__ + \"static/media/D2B.a1e36402.png\";","export default __webpack_public_path__ + \"static/media/D2G.cc357b81.png\";","export default __webpack_public_path__ + \"static/media/D2R.45d93f92.png\";","export default __webpack_public_path__ + \"static/media/D2Y.3b7c7812.png\";","export default __webpack_public_path__ + \"static/media/D4W.8ab81810.png\";","export default __webpack_public_path__ + \"static/media/W.d932cc55.png\";","export default __webpack_public_path__ + \"static/media/_B.95aa59aa.png\";","export default __webpack_public_path__ + \"static/media/_G.d9435180.png\";","export default __webpack_public_path__ + \"static/media/_R.95d0dbdf.png\";","export default __webpack_public_path__ + \"static/media/_Y.43a5d6f0.png\";","export default __webpack_public_path__ + \"static/media/skipB.f083b8d7.png\";","export default __webpack_public_path__ + \"static/media/skipG.d0dc1da2.png\";","export default __webpack_public_path__ + \"static/media/skipR.80b52ed1.png\";","export default __webpack_public_path__ + \"static/media/skipY.1355a1fb.png\";","export default function makeid(length) {\r\n    var result           = '';\r\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var charactersLength = characters.length;\r\n    for ( var i = 0; i < length; i++ ) {\r\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport randomCodeGenerator from '../utils/randomCodeGenerator'\r\n\r\nconst Homepage = () => {\r\n    const [roomCode, setRoomCode] = useState('')\r\n\r\n    return (\r\n        <div className='Homepage'>\r\n            <div className='homepage-menu'>\r\n                <img src={require('../assets/logo.png').default} width='200px' />\r\n                <div className='homepage-form'>\r\n                    <div className='homepage-join'>\r\n                        <input type='text' placeholder='Game Code' onChange={(event) => setRoomCode(event.target.value)} />\r\n                        <Link to={`/play?roomCode=${roomCode}`}><button className=\"game-button green\">JOIN GAME</button></Link>\r\n                    </div>\r\n                    <h1>OR</h1>\r\n                    <div className='homepage-create'>\r\n                        <Link to={`/play?roomCode=${randomCodeGenerator(5)}`}><button className=\"game-button orange\">CREATE GAME</button></Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage\r\n","//pack of 108 cards (_ = reverse)\r\nexport default [\r\n    '0R', '1R', '1R', '2R', '2R', '3R', '3R', '4R', '4R', '5R', '5R', '6R', '6R', '7R', '7R', '8R', '8R', '9R', '9R', 'skipR', 'skipR', '_R', '_R', 'D2R', 'D2R',\r\n    '0G', '1G', '1G', '2G', '2G', '3G', '3G', '4G', '4G', '5G', '5G', '6G', '6G', '7G', '7G', '8G', '8G', '9G', '9G', 'skipG', 'skipG', '_G', '_G', 'D2G', 'D2G',\r\n    '0B', '1B', '1B', '2B', '2B', '3B', '3B', '4B', '4B', '5B', '5B', '6B', '6B', '7B', '7B', '8B', '8B', '9B', '9B', 'skipB', 'skipB', '_B', '_B', 'D2B', 'D2B',\r\n    '0Y', '1Y', '1Y', '2Y', '2Y', '3Y', '3Y', '4Y', '4Y', '5Y', '5Y', '6Y', '6Y', '7Y', '7Y', '8Y', '8Y', '9Y', '9Y', 'skipY', 'skipY', '_Y', '_Y', 'D2Y', 'D2Y',\r\n    'W', 'W', 'W', 'W', 'D4W', 'D4W', 'D4W', 'D4W'\r\n]","import React, { useEffect, useState } from 'react'\r\nimport PACK_OF_CARDS from '../utils/packOfCards'\r\nimport shuffleArray from '../utils/shuffleArray'\r\nimport io from 'socket.io-client'\r\nimport queryString from 'query-string'\r\nimport Spinner from './Spinner'\r\nimport useSound from 'use-sound'\r\n\r\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\r\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\r\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\r\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\r\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\r\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\r\n\r\n//NUMBER CODES FOR ACTION CARDS\r\n//SKIP - 404\r\n//DRAW 2 - 252\r\n//WILD - 300\r\n//DRAW 4 WILD - 600\r\n\r\nlet socket\r\n const ENDPOINT = 'https://uno-online-raylson.vercel.app'\r\n// const ENDPOINT = 'http://localhost:5000'\r\n// const ENDPOINT = 'https://uno-online-multiplayer.herokuapp.com/'\r\n\r\nconst Game = (props) => {\r\n    const data = queryString.parse(props.location.search)\r\n\r\n    //initialize socket state\r\n    const [room, setRoom] = useState(data.roomCode)\r\n    const [roomFull, setRoomFull] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n    const [currentUser, setCurrentUser] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        const connectionOptions =  {\r\n            \"forceNew\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\", \r\n            \"timeout\" : 10000,                  \r\n            \"transports\" : [\"websocket\"]\r\n        }\r\n        socket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n        socket.emit('join', {room: room}, (error) => {\r\n            if(error)\r\n                setRoomFull(true)\r\n        })\r\n\r\n        //cleanup on component unmount\r\n        return function cleanup() {\r\n            socket.emit('disconnect')\r\n            //shut down connnection instance\r\n            socket.off()\r\n        }\r\n    }, [])\r\n\r\n    //initialize game state\r\n    const [gameOver, setGameOver] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [turn, setTurn] = useState('')\r\n    const [player1Deck, setPlayer1Deck] = useState([])\r\n    const [player2Deck, setPlayer2Deck] = useState([])\r\n    const [currentColor, setCurrentColor] = useState('')\r\n    const [currentNumber, setCurrentNumber] = useState('')\r\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\r\n    const [drawCardPile, setDrawCardPile] = useState([])\r\n\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [isSoundMuted, setSoundMuted] = useState(false)\r\n    const [isMusicMuted, setMusicMuted] = useState(true)\r\n\r\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [playShufflingSound] = useSound(shufflingSound)\r\n    const [playSkipCardSound] = useSound(skipCardSound)\r\n    const [playDraw2CardSound] = useSound(draw2CardSound)\r\n    const [playWildCardSound] = useSound(wildCardSound)\r\n    const [playDraw4CardSound] = useSound(draw4CardSound)\r\n    const [playGameOverSound] = useSound(gameOverSound)\r\n\r\n    //runs once on component mount\r\n    useEffect(() => {\r\n        //shuffle PACK_OF_CARDS array\r\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\r\n\r\n        //extract first 7 elements to player1Deck\r\n        const player1Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract first 7 elements to player2Deck\r\n        const player2Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract random card from shuffledCards and check if its not an action card\r\n        let startingCardIndex\r\n        while(true) {\r\n            startingCardIndex = Math.floor(Math.random() * 94)\r\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R' || shuffledCards[startingCardIndex]==='D2R' ||\r\n            shuffledCards[startingCardIndex]==='skipG' || shuffledCards[startingCardIndex]==='_G' || shuffledCards[startingCardIndex]==='D2G' ||\r\n            shuffledCards[startingCardIndex]==='skipB' || shuffledCards[startingCardIndex]==='_B' || shuffledCards[startingCardIndex]==='D2B' ||\r\n            shuffledCards[startingCardIndex]==='skipY' || shuffledCards[startingCardIndex]==='_Y' || shuffledCards[startingCardIndex]==='D2Y' ||\r\n            shuffledCards[startingCardIndex]==='W' || shuffledCards[startingCardIndex]==='D4W') {\r\n                continue;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n\r\n        //extract the card from that startingCardIndex into the playedCardsPile\r\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\r\n\r\n        //store all remaining cards into drawCardPile\r\n        const drawCardPile = shuffledCards\r\n\r\n        //send initial state to server\r\n        socket.emit('initGameState', {\r\n            gameOver: false,\r\n            turn: 'Player 1',\r\n            player1Deck: [...player1Deck],\r\n            player2Deck: [...player2Deck],\r\n            currentColor: playedCardsPile[0].charAt(1),\r\n            currentNumber: playedCardsPile[0].charAt(0),\r\n            playedCardsPile: [...playedCardsPile],\r\n            drawCardPile: [...drawCardPile]\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            setGameOver(gameOver)\r\n            setTurn(turn)\r\n            setPlayer1Deck(player1Deck)\r\n            setPlayer2Deck(player2Deck)\r\n            setCurrentColor(currentColor)\r\n            setCurrentNumber(currentNumber)\r\n            setPlayedCardsPile(playedCardsPile)\r\n            setDrawCardPile(drawCardPile)\r\n        })\r\n\r\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            gameOver && setGameOver(gameOver)\r\n            gameOver===true && playGameOverSound()\r\n            winner && setWinner(winner)\r\n            turn && setTurn(turn)\r\n            player1Deck && setPlayer1Deck(player1Deck)\r\n            player2Deck && setPlayer2Deck(player2Deck)\r\n            currentColor && setCurrentColor(currentColor)\r\n            currentNumber && setCurrentNumber(currentNumber)\r\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\r\n            drawCardPile && setDrawCardPile(drawCardPile)\r\n            setUnoButtonPressed(false)\r\n        })\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users)\r\n        })\r\n\r\n        socket.on('currentUserData', ({ name }) => {\r\n            setCurrentUser(name)\r\n        })\r\n\r\n        socket.on('message', message => {\r\n            setMessages(messages => [ ...messages, message ])\r\n\r\n            const chatBody = document.querySelector('.chat-body')\r\n            chatBody.scrollTop = chatBody.scrollHeight\r\n        })\r\n    }, [])\r\n\r\n    //some util functions\r\n    const checkGameOver = (arr) => {\r\n        return arr.length === 1\r\n    }\r\n    \r\n    const checkWinner = (arr, player) => {\r\n        return arr.length === 1 ? player : ''\r\n    }\r\n\r\n    const toggleChatBox = () => {\r\n        const chatBody = document.querySelector('.chat-body')\r\n        if(isChatBoxHidden) {\r\n            chatBody.style.display = 'block'\r\n            setChatBoxHidden(false)\r\n        }\r\n        else {\r\n            chatBody.style.display = 'none'\r\n            setChatBoxHidden(true)\r\n        }\r\n    }\r\n\r\n    const sendMessage= (event) => {\r\n        event.preventDefault()\r\n        if(message) {\r\n            socket.emit('sendMessage', { message: message }, () => {\r\n                setMessage('')\r\n            })\r\n        }\r\n    }\r\n\r\n    //driver functions\r\n    const onCardPlayedHandler = (played_card) => {\r\n        //extract player who played the card\r\n        const cardPlayedBy = turn\r\n        switch(played_card) {\r\n            //if card played was a number card\r\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\r\n                //extract number and color of played card\r\n                const numberOfPlayedCard = played_card.charAt(0)\r\n                const colorOfPlayedCard = played_card.charAt(1)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match\r\n                else if(currentNumber === numberOfPlayedCard) {\r\n                    console.log('numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a skip card\r\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(4)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if skip card played on skip card\r\n                else if(currentNumber === 404) {\r\n                    console.log('Numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw 2 card\r\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(2)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1X)\r\n                            updatedPlayer1Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1X)\r\n                            updatedPlayer2Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if draw 2 card played on draw 2 card\r\n                else if(currentNumber === 252) {                        \r\n                    console.log('number matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1X)\r\n                            updatedPlayer1Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1X)\r\n                            updatedPlayer2Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a wild card\r\n            case 'W': {\r\n                //check who played the card and return new state accordingly\r\n                if(cardPlayedBy === 'Player 1') {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player1Deck.indexOf(played_card)\r\n                    //then update turn, currentColor and currentNumber\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer1Deck.push(drawCard1)\r\n                        updatedPlayer1Deck.push(drawCard2)\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player2Deck.indexOf(played_card)\r\n                    //then update turn, currentColor and currentNumber\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer2Deck.push(drawCard1)\r\n                        updatedPlayer2Deck.push(drawCard2)\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300\r\n                        })\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw four wild card\r\n            case 'D4W': {\r\n                //check who played the card and return new state accordingly\r\n                if(cardPlayedBy === 'Player 1') {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player1Deck.indexOf(played_card)\r\n                    //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                    //make a copy of drawCardPile array\r\n                    const copiedDrawCardPileArray = [...drawCardPile]\r\n                    //pull out last four elements from it\r\n                    const drawCard1 = copiedDrawCardPileArray.pop()\r\n                    const drawCard2 = copiedDrawCardPileArray.pop()\r\n                    const drawCard3 = copiedDrawCardPileArray.pop()\r\n                    const drawCard4 = copiedDrawCardPileArray.pop()\r\n                    //then update currentColor and currentNumber - turn will remain same\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //pull out last two elements from drawCardPile\r\n                        const drawCard1X = copiedDrawCardPileArray.pop()\r\n                        const drawCard2X = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer1Deck.push(drawCard1X)\r\n                        updatedPlayer1Deck.push(drawCard2X)\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player2Deck.indexOf(played_card)\r\n                    //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                    //make a copy of drawCardPile array\r\n                    const copiedDrawCardPileArray = [...drawCardPile]\r\n                    //pull out last four elements from it\r\n                    const drawCard1 = copiedDrawCardPileArray.pop()\r\n                    const drawCard2 = copiedDrawCardPileArray.pop()\r\n                    const drawCard3 = copiedDrawCardPileArray.pop()\r\n                    const drawCard4 = copiedDrawCardPileArray.pop()\r\n                    //then update currentColor and currentNumber - turn will remain same\r\n                    !isSoundMuted && playDraw4CardSound()\r\n                    //send new state to server\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player2Deck),\r\n                        winner: checkWinner(player2Deck, 'Player 2'),\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 600,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    })\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //pull out last two elements from drawCardPile\r\n                        const drawCard1X = copiedDrawCardPileArray.pop()\r\n                        const drawCard2X = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer2Deck.push(drawCard1X)\r\n                        updatedPlayer2Deck.push(drawCard2X)\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    \r\n    const onCardDrawnHandler = () => {\r\n        //extract player who drew the card\r\n        const cardDrawnBy = turn\r\n        //check who drew the card and return new state accordingly\r\n        if(cardDrawnBy === 'Player 1') {\r\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //else add the drawn card to player1's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //else add the drawn card to player2's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\r\n            {(!roomFull) ? <>\r\n\r\n                <div className='topInfo'>\r\n                    <img src={require('../assets/logo.png').default} />\r\n                    <h1>Game Code: {room}</h1>\r\n                    <span>\r\n                        <button className='game-button green' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\r\n                        <button className='game-button green' onClick={() => {\r\n                            if(isMusicMuted)\r\n                                playBBgMusic()\r\n                            else\r\n                                pause()\r\n                            setMusicMuted(!isMusicMuted)\r\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\r\n                    </span>\r\n                </div>\r\n\r\n                {/* PLAYER LEFT MESSAGES */}\r\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\r\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\r\n\r\n                {users.length===2 && <>\r\n\r\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\r\n                    <div>\r\n                        {/* PLAYER 1 VIEW */}\r\n                        {currentUser === 'Player 1' && <>    \r\n                        <div className='player2Deck' style={{pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 2</p>\r\n                            {player2Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/card-back.png`).default}\r\n                                    />\r\n                            ))}\r\n                            {turn==='Player 2' && <Spinner />}\r\n                        </div>\r\n                        <br />\r\n                        <div className='middleInfo' style={turn === 'Player 2' ? {pointerEvents: 'none'} : null}>\r\n                            <button className='game-button' disabled={turn !== 'Player 1'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                            {playedCardsPile && playedCardsPile.length>0 &&\r\n                            <img\r\n                                className='Card'\r\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                                /> }\r\n                            <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\r\n                                setUnoButtonPressed(!isUnoButtonPressed)\r\n                                playUnoSound()\r\n                            }}>UNO</button>\r\n                        </div>\r\n                        <br />\r\n                        <div className='player1Deck' style={turn === 'Player 1' ? null : {pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 1</p>\r\n                            {player1Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/cards-front/${item}.png`).default}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"chatBoxWrapper\">\r\n                            <div className=\"chat-box chat-box-player1\">\r\n                                <div className=\"chat-head\">\r\n                                    <h2>Chat Box</h2>\r\n                                    {!isChatBoxHidden ?\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                                </div>\r\n                                <div className=\"chat-body\">\r\n                                    <div className=\"msg-insert\">\r\n                                        {messages.map(msg => {\r\n                                            if(msg.user === 'Player 2')\r\n                                                return <div className=\"msg-receive\">{msg.text}</div>\r\n                                            if(msg.user === 'Player 1')\r\n                                                return <div className=\"msg-send\">{msg.text}</div>\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"chat-text\">\r\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> </> }\r\n\r\n                        {/* PLAYER 2 VIEW */}\r\n                        {currentUser === 'Player 2' && <>\r\n                        <div className='player1Deck' style={{pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 1</p>\r\n                            {player1Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/card-back.png`).default}\r\n                                    />\r\n                            ))}\r\n                            {turn==='Player 1' && <Spinner />}\r\n                        </div>\r\n                        <br />\r\n                        <div className='middleInfo' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                            <button className='game-button' disabled={turn !== 'Player 2'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                            {playedCardsPile && playedCardsPile.length>0 &&\r\n                            <img\r\n                                className='Card'\r\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                                /> }\r\n                            <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\r\n                                setUnoButtonPressed(!isUnoButtonPressed)\r\n                                playUnoSound()\r\n                            }}>UNO</button>\r\n                        </div>\r\n                        <br />\r\n                        <div className='player2Deck' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                            <p className='playerDeckText'>Player 2</p>\r\n                            {player2Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/cards-front/${item}.png`).default}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"chatBoxWrapper\">\r\n                            <div className=\"chat-box chat-box-player2\">\r\n                                <div className=\"chat-head\">\r\n                                    <h2>Chat Box</h2>\r\n                                    {!isChatBoxHidden ?\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                                </div>\r\n                                <div className=\"chat-body\">\r\n                                    <div className=\"msg-insert\">\r\n                                        {messages.map(msg => {\r\n                                            if(msg.user === 'Player 1')\r\n                                                return <div className=\"msg-receive\">{msg.text}</div>\r\n                                            if(msg.user === 'Player 2')\r\n                                                return <div className=\"msg-send\">{msg.text}</div>\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"chat-text\">\r\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> </> }\r\n                    </div> }\r\n                </> }\r\n            </> : <h1>Room full</h1> }\r\n\r\n            <br />\r\n            <a href='/'><button className=\"game-button red\">QUIT</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","import React from 'react'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"loader\">Loading...</div>\r\n    )\r\n}\r\n\r\nexport default Spinner","export default __webpack_public_path__ + \"static/media/game-bg-music.7e3e2be7.mp3\";","export default __webpack_public_path__ + \"static/media/uno-sound.a805951d.mp3\";","export default __webpack_public_path__ + \"static/media/shuffling-cards-1.882a55be.mp3\";","export default __webpack_public_path__ + \"static/media/skip-sound.8f430470.mp3\";","export default __webpack_public_path__ + \"static/media/draw2-sound.a5a598d3.mp3\";","export default __webpack_public_path__ + \"static/media/wild-sound.0f5186fc.mp3\";","export default __webpack_public_path__ + \"static/media/draw4-sound.37381092.mp3\";","export default __webpack_public_path__ + \"static/media/game-over-sound.9b5a9070.mp3\";","export default function shuffleArray(array) { \r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1))\r\n        var temp = array[i]\r\n        array[i] = array[j]\r\n        array[j] = temp;\r\n    }   \r\n    return array\r\n}","import './App.css'\r\nimport { Route } from 'react-router-dom'\r\nimport Homepage from './components/Homepage'\r\nimport Game from './components/Game'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path='/' exact component={Homepage} />\r\n      <Route path='/play' exact component={Game} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}